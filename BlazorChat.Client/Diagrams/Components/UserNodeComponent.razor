@inject HttpClient httpClient

<div class="card">
    <div class="card-body">
        <h2>YOU</h2>
        <img src="@Node.UserDto.Image" />
        @if (Node.SelectedUser is not null)
        {
            <h4>Selected: @Node.SelectedUser.Name</h4>
        }
        else
        {
            <h4>Select a User</h4>
        }
        <div class="chatContainer">
            <input @bind="message" @bind:event="oninput" />
            <button @onclick='async () => await ChatAsync(Node.SelectedUser.Id, message)'>Chat</button>
        </div>
        @if (messages.Count > 0 && Node.SelectedUser is not null)
        {
            <div class="messagesContainer">
                @foreach (var item in messages.Where(m => m.ReceiverId == Node.SelectedUser.Id || m.SenderId == Node.SelectedUser.Id))
                {
                    if (item.SenderId == Node.UserDto.Id)
                    {
                        <h9>You: @item.Content</h9>
                    }
                    else
                    {
                        <h9>@Node.SelectedUser.Name: @item.Content</h9>
                    }
                }
            </div>
        }
    </div>
    <div class="portContainer">
        @foreach (var port in Node.Ports)
        {
            <PortRenderer Port="port" />
        }
    </div>
</div>


@code{
    [CascadingParameter]
    public HubConnection hubConnection { get; set; }
    [Parameter]
    public UserNode Node { get; set; }

    private List<MessageDto> messages;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        messages = new List<MessageDto>();
        hubConnection.On("ReceiveMessage", async () =>
        {
            messages = await httpClient.GetFromJsonAsync<List<MessageDto>>("/api/Messages");
            StateHasChanged();
        });
    }
    public async Task ChatAsync(string receiverId, string messageText)
    {
        MessageDto message = new MessageDto { Content = messageText, SenderId = Node.UserDto.Id, ReceiverId = receiverId };
        await hubConnection.SendAsync("Chat", message);
    }
}
