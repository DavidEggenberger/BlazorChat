@page "/"
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider tokenProvider
@inject HttpClient httpClient

<AuthorizeView>
    <NotAuthorized>
        <h3>Login to Chat!</h3>
    </NotAuthorized>
    <Authorized>
        <div style="height: 100%; width: 100%;">
            <CascadingValue Value="hubConnection" Name="hubConnection">
                <CascadingValue Value="diagram">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </CascadingValue>
        </div>
    </Authorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private HubConnection hubConnection;
    private Diagram diagram;

    protected override async Task OnInitializedAsync()
    {
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        diagram.Links.Added += b =>
        {
            b.TargetPortChanged += (bt, old, niw) =>
            {
                ((UserNode)bt.SourcePort.Parent).SelectedUser = ((ContactNode)bt.TargetPort.Parent).UserDto;
                StateHasChanged();
            };
        };
        diagram.RegisterModelComponent<UserNode, UserNodeComponent>();
        diagram.RegisterModelComponent<ContactNode, ContactNodeComponent>();

        ClaimsPrincipal cp;
        if ((cp = (await AuthState).User).Identity.IsAuthenticated)
        {
            AccessToken token = new AccessToken();

            (await tokenProvider.RequestAccessToken()).TryGetToken(out token);

            if (token is not null)
            {
                hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
                {
                    options.AccessTokenProvider = async () => token.Value;
                })
                .Build();
                await hubConnection.StartAsync();
                foreach (var user in await httpClient.GetFromJsonAsync<List<UserDto>>("/api/OnlineUsers"))
                {
                    Random rnd = new Random();
                    double width = diagram.Container.Width / 5;
                    double height = diagram.Container.Height / 5;
                    (double w, double y) = user switch
                    {
                        UserDto s when s.IDP.Contains("LinkedIn") => (rnd.Next(3 * (int)width, (int)diagram.Container.Width - 250), rnd.Next((int)height, (int)(3 * height - 100))),
                        UserDto s when s.IDP.Contains("GitHub") => (rnd.Next(0, 2 * (int)width), rnd.Next((int)height, (int)(3 * height - 100))),
                        _ => (3 * (int)width, rnd.Next((int)height, (int)(3 * height)))
                    };
                    if (user.Id == cp.Claims.Where(s => s.Type == "sub").First().Value)
                    {
                        diagram.Nodes.Add(new UserNode(new Point(w, y))
                        {
                            UserDto = user
                        });
                    }
                    else
                    {
                        diagram.Nodes.Add(new ContactNode(new Point(w, y))
                        {
                            UserDto = user
                        });
                    }
                }
                hubConnection.On<UserDto>("RemoveUser", async userToRemove =>
                {
                    NodeModel userNode = diagram.Nodes.First(node =>
                    {
                        if (node is ContactNode && ((ContactNode)node).UserDto.Id == userToRemove.Id)
                        {
                            return true;
                        }
                        return false;
                    });
                    diagram.Nodes.Remove(userNode);
                    StateHasChanged();
                });
                hubConnection.On<UserDto>("NewUser", async newUser =>
                {
                    Random rnd = new Random();
                    double width = diagram.Container.Width / 5;
                    double height = diagram.Container.Height / 5;
                    (double w, double y) = newUser switch
                    {
                        UserDto s when s.IDP.Contains("LinkedIn") => (rnd.Next(3 * (int)width, (int)diagram.Container.Width - 250), rnd.Next((int)height, (int)(3 * height - 100))),
                        UserDto s when s.IDP.Contains("GitHub") => (rnd.Next(0, 2 * (int)width), rnd.Next((int)height, (int)(3 * height - 100))),
                        _ => (3 * (int)width, rnd.Next((int)height, (int)(3 * height)))
                    };
                    if (newUser.Id == cp.Claims.Where(s => s.Type == "sub").First().Value)
                    {
                        diagram.Nodes.Add(new UserNode(new Point(w, y))
                        {
                            UserDto = newUser
                        });
                    }
                    else
                    {
                        diagram.Nodes.Add(new ContactNode(new Point(w, y))
                        {
                            UserDto = newUser
                        });
                    }
                    StateHasChanged();
                });
                await hubConnection.InvokeAsync("NewOnlineUser");
                StateHasChanged();
            }
        }
    }
}